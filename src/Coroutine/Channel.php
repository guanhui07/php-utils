<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2019 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace Raylin666\Utils\Coroutine;

use Swoole\Coroutine\Channel as SwooleCoroutineChannel;

/**
 * Class Channel
 * @package Raylin666\Utils\Coroutine
 */
class Channel extends SwooleCoroutineChannel
{
    /**
     * Channel constructor.
     * @param int $capacity     设置容量【必须为大于或等于 1 的整数】
     */
    public function __construct(int $capacity = 1)
    {
        parent::__construct($capacity);
    }

    /**
     * 向通道中写入数据
     * @param      $data        push 数据 【可以是任意类型的 PHP 变量，包括匿名函数和资源】(为避免产生歧义，请勿向通道中写入空数据，如 0、false、空字符串、null)
     * @param null $timeout     设置超时时间  /s
     * @return bool
     */
    public function push($data, $timeout = null): bool
    {
        return parent::push($data, $timeout); // TODO: Change the autogenerated stub
    }

    /**
     * 从通道中读取数据
     * @param null $timeout     设置超时时间 /s
     * @return mixed|void
     */
    public function pop($timeout = null)
    {
        return parent::pop($timeout); // TODO: Change the autogenerated stub
    }

    /**
     * 返回一个数组，缓冲通道将包括 4 项信息，无缓冲通道返回 2 项信息
     *      consumer_num 消费者数量，表示当前通道为空，有 N 个协程正在等待其他协程调用 push 方法生产数据
            producer_num 生产者数量，表示当前通道已满，有 N 个协程正在等待其他协程调用 pop 方法消费数据
            queue_num 通道中的元素数量
     * @return array
     */
    public function stats(): array
    {
        return parent::stats(); // TODO: Change the autogenerated stub
    }

    /**
     * 关闭通道。并唤醒所有等待读写的协程
     * @return bool
     */
    public function close(): bool
    {
        return parent::close(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取通道中的元素数量
     * @return int
     */
    public function length(): int
    {
        return parent::length(); // TODO: Change the autogenerated stub
    }

    /**
     * 判断当前通道是否为空
     * @return bool
     */
    public function isEmpty(): bool
    {
        return parent::isEmpty(); // TODO: Change the autogenerated stub
    }

    /**
     * 判断当前通道是否已满
     * @return bool
     */
    public function isFull(): bool
    {
        return parent::isFull(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取通道缓冲区容量【构造函数中设定的容量会保存在此，不过如果设定的容量小于 1 则此变量会等于 1】
     * @return int
     */
    public function getCapacity(): int
    {
        return $this->capacity;
    }

    /**
     * 获取错误码
     * 0    SWOOLE_CHANNEL_OK           成功
     * -1   SWOOLE_CHANNEL_TIMEOUT      超时 pop 失败时 (超时)
     * -2   SWOOLE_CHANNEL_CLOSED       channel 已关闭，继续操作 channel
     * @return int
     */
    public function getErrCode(): int
    {
        return $this->errCode;
    }
}