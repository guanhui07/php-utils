<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

/*
|--------------------------------------------------------------------------
| 数组数据构建
|--------------------------------------------------------------------------

$spl = new ArrSpl();
$spl->set('host', '127.0.0.1');
$spl->set('port', 6379);
$spl->set('auth', 'redis123');
var_dump($spl->getAll());

 */

namespace Raylin666\Utils\Spl;

use ArrayObject;
use Raylin666\Utils\Helper\ArrayHelper;
use SimpleXMLElement;

/**
 * Class ArraySpl
 * @package Raylin666\Utils\Spl
 */
class ArraySpl extends ArrayObject
{
    /**
     * 设置数组值
     *
     * @param $key
     * @param $value
     */
    public function set($key, $value) : void
    {
        $this[$key] = $value;
    }

    /**
     * 批量设置数组值
     *
     * @param array $array
     */
    public function setBatch(array $array): void
    {
        foreach ($array as $key => $value) {
            $this->set($key, $value);
        }
    }

    /**
     * 获取数组值
     *
     * @param      $key
     * @param null $default
     * @return mixed|null
     */
    public function get($key, $default = null)
    {
        return ArrayHelper::get($this->getAll(), $key, $default);
    }

    /**
     * 获取数组集合
     *
     * @return array
     */
    public function getAll(): array
    {
        return (array) $this;
    }

    /**
     * 数组键移除
     *
     * @param mixed ...$keys
     */
    public function unset(...$keys)
    {
        foreach ($keys as $key) {
            unset($this[$key]);
        }
    }

    /**
     * 删除数组键
     *
     * @param $key
     */
    public function delete($key): void
    {
        $this->unset($key);
    }

    /**
     * 数组去重取唯一值
     *
     * @return ArraySpl
     */
    public function unique(): ArraySpl
    {
        return new ArraySpl(array_unique($this->getAll(), SORT_REGULAR));
    }

    /**
     * 获取数组中重复的值
     *
     * @return ArraySpl
     */
    public function multiple(): ArraySpl
    {
        $unique = array_unique($this->getAll(), SORT_REGULAR);
        return new ArraySpl(array_udiff_uassoc($this->getAll(), $unique, function ($key1, $key2) {
            return ($key1 === $key2) ? 0 : 1;
        }, function ($value1, $value2) {
            return ($value1 === $value2) ? 0 : 1;
        }));
    }

    /**
     * 按照键值升序
     *
     * @return ArraySpl
     */
    public function asort(): ArraySpl
    {
        parent::asort(); // TODO: Change the autogenerated stub

        return $this;
    }

    /**
     * 按照键升序
     *
     * @return ArraySpl
     */
    public function ksort(): ArraySpl
    {
        parent::ksort(); // TODO: Change the autogenerated stub

        return $this;
    }

    /**
     * 自定义排序
     *
     * @param int $sort_flags
     * @return ArraySpl
     */
    public function sort($sort_flags = SORT_REGULAR): ArraySpl
    {
        $array = $this->getAll();
        sort($array, $sort_flags);
        return new ArraySpl($array);
    }

    /**
     * 取得某一列
     *
     * @param      $column
     * @param null $index_key
     * @return ArraySpl
     */
    public function column($column, $index_key = null): ArraySpl
    {
        return new ArraySpl(array_column($this->getAll(), $column, $index_key));
    }

    /**
     * 交换数组中的键和值 (需要注意: 数组交换键名值时,原数组值必须是数字或字符串,不允许是数组)
     *
     * @return ArraySpl
     */
    public function flip(): ArraySpl
    {
        return new ArraySpl(array_flip($this->getAll()));
    }

    /**
     * 过滤本数组
     *
     * @param string|array $keys    需要取得/排除的键
     * @param bool         $exclude true则排除设置的键名 false则仅获取设置的键名
     * @return ArraySpl
     */
    public function filter($keys, $exclude = true) : ArraySpl
    {
        if (is_string($keys)) {
            $keys = explode(',', $keys);
        }

        $new = array();
        foreach ($this->getAll() as $name => $value) {
            if (! $exclude) {
                in_array($name, $keys) ? $new[$name] = $value : null;
            } else {
                in_array($name, $keys) ? null : $new[$name] = $value;
            }
        }

        return new ArraySpl($new);
    }

    /**
     * 获取数组集合键名
     *
     * @param null $keys
     * @return array
     */
    public function keys($keys = null): array
    {
        return array_keys($keys ? $this->filter($keys, false)->getAll() : $this->getAll());
    }

    /**
     * 提取数组中的值
     *
     * @return ArraySpl
     */
    public function values(): ArraySpl
    {
        return new ArraySpl(array_values($this->getAll()));
    }

    /**
     * 清除数组集合
     *
     * @return ArraySpl
     */
    public function flush(): ArraySpl
    {
        foreach ($this->getArrayCopy() as $key => $value) {
            unset($this[$key]);
        }

        return $this;
    }

    /**
     *  转为XML
        $test = new ArraySpl([
            'title'=>'title',
            'items'=>[
                        ['title'=>'Some string', 'number' => 1],
                        ['title'=>'Some string', 'number' => 2],
                        ['title'=>'Some string', 'number' => 3]
            ]
        ]);
     *
     * @param bool   $CD_DATA
     * @param string $rootName
     * @param string $encoding
     * @return bool|string
     */
    public function toXML($CD_DATA = false, $rootName = 'xml', $encoding = 'UTF-8')
    {
        $data = $this->getArrayCopy();

        if ($CD_DATA) {
            /*
             * 默认制定
             */
            $xml = new class('<?xml version="1.0" encoding="' . $encoding . '" ?>'."<{$rootName}></{$rootName}>") extends SimpleXMLElement {
                public function addCData($cdata_text) {
                    $dom = dom_import_simplexml($this);
                    $cdata = $dom->ownerDocument->createCDATASection($cdata_text);
                    $dom->appendChild($cdata);
                }
            };
        }else{
            $xml = new SimpleXMLElement('<?xml version="1.0" encoding="' . $encoding . '" ?>'."<{$rootName} ></{$rootName}>");
        }

        $parser = function ($xml, $data) use (&$parser, $CD_DATA) {
            foreach ($data as $k => $v) {
                if (is_array($v)) {
                    if (! is_numeric($k)) {
                        $ch= $xml->addChild($k);
                    } else{
                        $ch = $xml->addChild(substr($xml->getName(),0,-1));
                    }
                    $parser($ch,$v);
                } else {
                    if (is_numeric($k)) {
                        $xml->addChild($k, $v);
                    } else {
                        if ($CD_DATA) {
                            $n = $xml->addChild($k);
                            $n->addCData($v);
                        } else {
                            $xml->addChild($k, $v);
                        }
                    }
                }
            }
        };

        $parser($xml,$data);

        unset($parser);

        $str = $xml->asXML();

        return substr($str,strpos($str,"\n") + 1);
    }
}